/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zalando-incubator/kube-metrics-adapter/pkg/apis/zalando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterScalingScheduleLister helps list ClusterScalingSchedules.
// All objects returned here must be treated as read-only.
type ClusterScalingScheduleLister interface {
	// List lists all ClusterScalingSchedules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterScalingSchedule, err error)
	// ClusterScalingSchedules returns an object that can list and get ClusterScalingSchedules.
	ClusterScalingSchedules(namespace string) ClusterScalingScheduleNamespaceLister
	ClusterScalingScheduleListerExpansion
}

// clusterScalingScheduleLister implements the ClusterScalingScheduleLister interface.
type clusterScalingScheduleLister struct {
	indexer cache.Indexer
}

// NewClusterScalingScheduleLister returns a new ClusterScalingScheduleLister.
func NewClusterScalingScheduleLister(indexer cache.Indexer) ClusterScalingScheduleLister {
	return &clusterScalingScheduleLister{indexer: indexer}
}

// List lists all ClusterScalingSchedules in the indexer.
func (s *clusterScalingScheduleLister) List(selector labels.Selector) (ret []*v1.ClusterScalingSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterScalingSchedule))
	})
	return ret, err
}

// ClusterScalingSchedules returns an object that can list and get ClusterScalingSchedules.
func (s *clusterScalingScheduleLister) ClusterScalingSchedules(namespace string) ClusterScalingScheduleNamespaceLister {
	return clusterScalingScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterScalingScheduleNamespaceLister helps list and get ClusterScalingSchedules.
// All objects returned here must be treated as read-only.
type ClusterScalingScheduleNamespaceLister interface {
	// List lists all ClusterScalingSchedules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterScalingSchedule, err error)
	// Get retrieves the ClusterScalingSchedule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClusterScalingSchedule, error)
	ClusterScalingScheduleNamespaceListerExpansion
}

// clusterScalingScheduleNamespaceLister implements the ClusterScalingScheduleNamespaceLister
// interface.
type clusterScalingScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterScalingSchedules in the indexer for a given namespace.
func (s clusterScalingScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterScalingSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterScalingSchedule))
	})
	return ret, err
}

// Get retrieves the ClusterScalingSchedule from the indexer for a given namespace and name.
func (s clusterScalingScheduleNamespaceLister) Get(name string) (*v1.ClusterScalingSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clusterscalingschedule"), name)
	}
	return obj.(*v1.ClusterScalingSchedule), nil
}
