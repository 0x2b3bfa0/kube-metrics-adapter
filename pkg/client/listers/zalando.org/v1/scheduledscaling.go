/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zalando-incubator/kube-metrics-adapter/pkg/apis/zalando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledScalingLister helps list ScheduledScalings.
type ScheduledScalingLister interface {
	// List lists all ScheduledScalings in the indexer.
	List(selector labels.Selector) (ret []*v1.ScheduledScaling, err error)
	// ScheduledScalings returns an object that can list and get ScheduledScalings.
	ScheduledScalings(namespace string) ScheduledScalingNamespaceLister
	ScheduledScalingListerExpansion
}

// scheduledScalingLister implements the ScheduledScalingLister interface.
type scheduledScalingLister struct {
	indexer cache.Indexer
}

// NewScheduledScalingLister returns a new ScheduledScalingLister.
func NewScheduledScalingLister(indexer cache.Indexer) ScheduledScalingLister {
	return &scheduledScalingLister{indexer: indexer}
}

// List lists all ScheduledScalings in the indexer.
func (s *scheduledScalingLister) List(selector labels.Selector) (ret []*v1.ScheduledScaling, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScheduledScaling))
	})
	return ret, err
}

// ScheduledScalings returns an object that can list and get ScheduledScalings.
func (s *scheduledScalingLister) ScheduledScalings(namespace string) ScheduledScalingNamespaceLister {
	return scheduledScalingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledScalingNamespaceLister helps list and get ScheduledScalings.
type ScheduledScalingNamespaceLister interface {
	// List lists all ScheduledScalings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ScheduledScaling, err error)
	// Get retrieves the ScheduledScaling from the indexer for a given namespace and name.
	Get(name string) (*v1.ScheduledScaling, error)
	ScheduledScalingNamespaceListerExpansion
}

// scheduledScalingNamespaceLister implements the ScheduledScalingNamespaceLister
// interface.
type scheduledScalingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledScalings in the indexer for a given namespace.
func (s scheduledScalingNamespaceLister) List(selector labels.Selector) (ret []*v1.ScheduledScaling, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScheduledScaling))
	})
	return ret, err
}

// Get retrieves the ScheduledScaling from the indexer for a given namespace and name.
func (s scheduledScalingNamespaceLister) Get(name string) (*v1.ScheduledScaling, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("scheduledscaling"), name)
	}
	return obj.(*v1.ScheduledScaling), nil
}
